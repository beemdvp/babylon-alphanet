/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    EcdsaSecp256k1SignatureWithPublicKey,
    instanceOfEcdsaSecp256k1SignatureWithPublicKey,
    EcdsaSecp256k1SignatureWithPublicKeyFromJSON,
    EcdsaSecp256k1SignatureWithPublicKeyFromJSONTyped,
    EcdsaSecp256k1SignatureWithPublicKeyToJSON,
} from './EcdsaSecp256k1SignatureWithPublicKey';
import {
    EddsaEd25519SignatureWithPublicKey,
    instanceOfEddsaEd25519SignatureWithPublicKey,
    EddsaEd25519SignatureWithPublicKeyFromJSON,
    EddsaEd25519SignatureWithPublicKeyFromJSONTyped,
    EddsaEd25519SignatureWithPublicKeyToJSON,
} from './EddsaEd25519SignatureWithPublicKey';

/**
 * @type SignatureWithPublicKey
 * 
 * @export
 */
export type SignatureWithPublicKey = { keyType: 'EcdsaSecp256k1' } & EcdsaSecp256k1SignatureWithPublicKey | { keyType: 'EddsaEd25519' } & EddsaEd25519SignatureWithPublicKey;

export function SignatureWithPublicKeyFromJSON(json: any): SignatureWithPublicKey {
    return SignatureWithPublicKeyFromJSONTyped(json, false);
}

export function SignatureWithPublicKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignatureWithPublicKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['keyType']) {
        case 'EcdsaSecp256k1':
            return {...EcdsaSecp256k1SignatureWithPublicKeyFromJSONTyped(json, true), keyType: 'EcdsaSecp256k1'};
        case 'EddsaEd25519':
            return {...EddsaEd25519SignatureWithPublicKeyFromJSONTyped(json, true), keyType: 'EddsaEd25519'};
        default:
            throw new Error(`No variant of SignatureWithPublicKey exists with 'keyType=${json['keyType']}'`);
    }
}

export function SignatureWithPublicKeyToJSON(value?: SignatureWithPublicKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['keyType']) {
        case 'EcdsaSecp256k1':
            return EcdsaSecp256k1SignatureWithPublicKeyToJSON(value);
        case 'EddsaEd25519':
            return EddsaEd25519SignatureWithPublicKeyToJSON(value);
        default:
            throw new Error(`No variant of SignatureWithPublicKey exists with 'keyType=${value['keyType']}'`);
    }

}

