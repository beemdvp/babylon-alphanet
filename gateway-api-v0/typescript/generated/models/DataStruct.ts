/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityId } from './EntityId';
import {
    EntityIdFromJSON,
    EntityIdFromJSONTyped,
    EntityIdToJSON,
} from './EntityId';
import type { SborData } from './SborData';
import {
    SborDataFromJSON,
    SborDataFromJSONTyped,
    SborDataToJSON,
} from './SborData';

/**
 * 
 * @export
 * @interface DataStruct
 */
export interface DataStruct {
    /**
     * 
     * @type {SborData}
     * @memberof DataStruct
     */
    structData: SborData;
    /**
     * 
     * @type {Array<EntityId>}
     * @memberof DataStruct
     */
    ownedEntities: Array<EntityId>;
    /**
     * 
     * @type {Array<EntityId>}
     * @memberof DataStruct
     */
    referencedEntities: Array<EntityId>;
}

/**
 * Check if a given object implements the DataStruct interface.
 */
export function instanceOfDataStruct(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "structData" in value;
    isInstance = isInstance && "ownedEntities" in value;
    isInstance = isInstance && "referencedEntities" in value;

    return isInstance;
}

export function DataStructFromJSON(json: any): DataStruct {
    return DataStructFromJSONTyped(json, false);
}

export function DataStructFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataStruct {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'structData': SborDataFromJSON(json['struct_data']),
        'ownedEntities': ((json['owned_entities'] as Array<any>).map(EntityIdFromJSON)),
        'referencedEntities': ((json['referenced_entities'] as Array<any>).map(EntityIdFromJSON)),
    };
}

export function DataStructToJSON(value?: DataStruct | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'struct_data': SborDataToJSON(value.structData),
        'owned_entities': ((value.ownedEntities as Array<any>).map(EntityIdToJSON)),
        'referenced_entities': ((value.referencedEntities as Array<any>).map(EntityIdToJSON)),
    };
}

