/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Fees paid
 * @export
 * @interface FeeSummary
 */
export interface FeeSummary {
    /**
     * Specifies whether the transaction execution loan has been fully repaid.
     * @type {boolean}
     * @memberof FeeSummary
     */
    loanFullyRepaid: boolean;
    /**
     * An integer between 0 and 2^32 - 1, representing the maximum amount of cost units available for the transaction execution.
     * @type {number}
     * @memberof FeeSummary
     */
    costUnitLimit: number;
    /**
     * An integer between 0 and 2^32 - 1, representing the amount of cost units consumed by the transaction execution.
     * @type {number}
     * @memberof FeeSummary
     */
    costUnitConsumed: number;
    /**
     * A decimal-string-encoded integer between 0 and 2^255-1, which represents the total number of 10^(-18) subunits in
     * the XRD price of a single cost unit.
     * @type {string}
     * @memberof FeeSummary
     */
    costUnitPriceAttos: string;
    /**
     * An integer between 0 and 2^32 - 1, specifying the validator tip as a percentage amount. A value of "1" corresponds to 1% of the fee.
     * @type {number}
     * @memberof FeeSummary
     */
    tipPercentage: number;
    /**
     * A decimal-string-encoded integer between 0 and 2^255-1, which represents the total number of 10^(-18) subunits in
     * the total amount of XRD burned in the transaction.
     * @type {string}
     * @memberof FeeSummary
     */
    xrdBurnedAttos: string;
    /**
     * A decimal-string-encoded integer between 0 and 2^255-1, which represents the total number of 10^(-18) subunits in
     * the total amount of XRD tipped to validators in the transaction.
     * @type {string}
     * @memberof FeeSummary
     */
    xrdTippedAttos: string;
}

/**
 * Check if a given object implements the FeeSummary interface.
 */
export function instanceOfFeeSummary(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "loanFullyRepaid" in value;
    isInstance = isInstance && "costUnitLimit" in value;
    isInstance = isInstance && "costUnitConsumed" in value;
    isInstance = isInstance && "costUnitPriceAttos" in value;
    isInstance = isInstance && "tipPercentage" in value;
    isInstance = isInstance && "xrdBurnedAttos" in value;
    isInstance = isInstance && "xrdTippedAttos" in value;

    return isInstance;
}

export function FeeSummaryFromJSON(json: any): FeeSummary {
    return FeeSummaryFromJSONTyped(json, false);
}

export function FeeSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeeSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'loanFullyRepaid': json['loan_fully_repaid'],
        'costUnitLimit': json['cost_unit_limit'],
        'costUnitConsumed': json['cost_unit_consumed'],
        'costUnitPriceAttos': json['cost_unit_price_attos'],
        'tipPercentage': json['tip_percentage'],
        'xrdBurnedAttos': json['xrd_burned_attos'],
        'xrdTippedAttos': json['xrd_tipped_attos'],
    };
}

export function FeeSummaryToJSON(value?: FeeSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'loan_fully_repaid': value.loanFullyRepaid,
        'cost_unit_limit': value.costUnitLimit,
        'cost_unit_consumed': value.costUnitConsumed,
        'cost_unit_price_attos': value.costUnitPriceAttos,
        'tip_percentage': value.tipPercentage,
        'xrd_burned_attos': value.xrdBurnedAttos,
        'xrd_tipped_attos': value.xrdTippedAttos,
    };
}

