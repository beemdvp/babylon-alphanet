/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DownSubstate } from './DownSubstate';
import {
    DownSubstateFromJSON,
    DownSubstateFromJSONTyped,
    DownSubstateToJSON,
} from './DownSubstate';
import type { GlobalEntityId } from './GlobalEntityId';
import {
    GlobalEntityIdFromJSON,
    GlobalEntityIdFromJSONTyped,
    GlobalEntityIdToJSON,
} from './GlobalEntityId';
import type { SubstateId } from './SubstateId';
import {
    SubstateIdFromJSON,
    SubstateIdFromJSONTyped,
    SubstateIdToJSON,
} from './SubstateId';
import type { UpSubstate } from './UpSubstate';
import {
    UpSubstateFromJSON,
    UpSubstateFromJSONTyped,
    UpSubstateToJSON,
} from './UpSubstate';

/**
 * Transaction state updates (only present if status is Succeeded or Failed)
 * @export
 * @interface StateUpdates
 */
export interface StateUpdates {
    /**
     * 
     * @type {Array<SubstateId>}
     * @memberof StateUpdates
     */
    downVirtualSubstates: Array<SubstateId>;
    /**
     * 
     * @type {Array<UpSubstate>}
     * @memberof StateUpdates
     */
    upSubstates: Array<UpSubstate>;
    /**
     * 
     * @type {Array<DownSubstate>}
     * @memberof StateUpdates
     */
    downSubstates: Array<DownSubstate>;
    /**
     * 
     * @type {Array<GlobalEntityId>}
     * @memberof StateUpdates
     */
    newGlobalEntities: Array<GlobalEntityId>;
}

/**
 * Check if a given object implements the StateUpdates interface.
 */
export function instanceOfStateUpdates(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "downVirtualSubstates" in value;
    isInstance = isInstance && "upSubstates" in value;
    isInstance = isInstance && "downSubstates" in value;
    isInstance = isInstance && "newGlobalEntities" in value;

    return isInstance;
}

export function StateUpdatesFromJSON(json: any): StateUpdates {
    return StateUpdatesFromJSONTyped(json, false);
}

export function StateUpdatesFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateUpdates {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'downVirtualSubstates': ((json['down_virtual_substates'] as Array<any>).map(SubstateIdFromJSON)),
        'upSubstates': ((json['up_substates'] as Array<any>).map(UpSubstateFromJSON)),
        'downSubstates': ((json['down_substates'] as Array<any>).map(DownSubstateFromJSON)),
        'newGlobalEntities': ((json['new_global_entities'] as Array<any>).map(GlobalEntityIdFromJSON)),
    };
}

export function StateUpdatesToJSON(value?: StateUpdates | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'down_virtual_substates': ((value.downVirtualSubstates as Array<any>).map(SubstateIdToJSON)),
        'up_substates': ((value.upSubstates as Array<any>).map(UpSubstateToJSON)),
        'down_substates': ((value.downSubstates as Array<any>).map(DownSubstateToJSON)),
        'new_global_entities': ((value.newGlobalEntities as Array<any>).map(GlobalEntityIdToJSON)),
    };
}

