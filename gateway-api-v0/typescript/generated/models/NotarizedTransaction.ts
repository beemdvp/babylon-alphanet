/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Signature } from './Signature';
import {
    SignatureFromJSON,
    SignatureFromJSONTyped,
    SignatureToJSON,
} from './Signature';
import type { SignedTransactionIntent } from './SignedTransactionIntent';
import {
    SignedTransactionIntentFromJSON,
    SignedTransactionIntentFromJSONTyped,
    SignedTransactionIntentToJSON,
} from './SignedTransactionIntent';

/**
 * 
 * @export
 * @interface NotarizedTransaction
 */
export interface NotarizedTransaction {
    /**
     * The hex-encoded double-SHA256 hash of the notarized transaction payload. Also known as the payload_hash or the notarized_transaction_hash.
     * @type {string}
     * @memberof NotarizedTransaction
     */
    hash: string;
    /**
     * The hex-encoded full notarized transaction payload
     * @type {string}
     * @memberof NotarizedTransaction
     */
    payloadHex: string;
    /**
     * 
     * @type {SignedTransactionIntent}
     * @memberof NotarizedTransaction
     */
    signedIntent: SignedTransactionIntent;
    /**
     * 
     * @type {Signature}
     * @memberof NotarizedTransaction
     */
    notarySignature: Signature;
}

/**
 * Check if a given object implements the NotarizedTransaction interface.
 */
export function instanceOfNotarizedTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "payloadHex" in value;
    isInstance = isInstance && "signedIntent" in value;
    isInstance = isInstance && "notarySignature" in value;

    return isInstance;
}

export function NotarizedTransactionFromJSON(json: any): NotarizedTransaction {
    return NotarizedTransactionFromJSONTyped(json, false);
}

export function NotarizedTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotarizedTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hash': json['hash'],
        'payloadHex': json['payload_hex'],
        'signedIntent': SignedTransactionIntentFromJSON(json['signed_intent']),
        'notarySignature': SignatureFromJSON(json['notary_signature']),
    };
}

export function NotarizedTransactionToJSON(value?: NotarizedTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hash': value.hash,
        'payload_hex': value.payloadHex,
        'signed_intent': SignedTransactionIntentToJSON(value.signedIntent),
        'notary_signature': SignatureToJSON(value.notarySignature),
    };
}

