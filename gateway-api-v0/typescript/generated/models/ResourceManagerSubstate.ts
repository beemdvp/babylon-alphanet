/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
} from './EntityType';
import type { ResourceManagerSubstateAllOf } from './ResourceManagerSubstateAllOf';
import {
    ResourceManagerSubstateAllOfFromJSON,
    ResourceManagerSubstateAllOfFromJSONTyped,
    ResourceManagerSubstateAllOfToJSON,
} from './ResourceManagerSubstateAllOf';
import type { ResourceManagerSubstateAllOfMetadata } from './ResourceManagerSubstateAllOfMetadata';
import {
    ResourceManagerSubstateAllOfMetadataFromJSON,
    ResourceManagerSubstateAllOfMetadataFromJSONTyped,
    ResourceManagerSubstateAllOfMetadataToJSON,
} from './ResourceManagerSubstateAllOfMetadata';
import type { ResourceType } from './ResourceType';
import {
    ResourceTypeFromJSON,
    ResourceTypeFromJSONTyped,
    ResourceTypeToJSON,
} from './ResourceType';
import type { SubstateBase } from './SubstateBase';
import {
    SubstateBaseFromJSON,
    SubstateBaseFromJSONTyped,
    SubstateBaseToJSON,
} from './SubstateBase';
import type { SubstateType } from './SubstateType';
import {
    SubstateTypeFromJSON,
    SubstateTypeFromJSONTyped,
    SubstateTypeToJSON,
} from './SubstateType';

/**
 * 
 * @export
 * @interface ResourceManagerSubstate
 */
export interface ResourceManagerSubstate {
    /**
     * 
     * @type {EntityType}
     * @memberof ResourceManagerSubstate
     */
    entityType: EntityType;
    /**
     * 
     * @type {SubstateType}
     * @memberof ResourceManagerSubstate
     */
    substateType: SubstateType;
    /**
     * 
     * @type {ResourceType}
     * @memberof ResourceManagerSubstate
     */
    resourceType: ResourceType;
    /**
     * 
     * @type {number}
     * @memberof ResourceManagerSubstate
     */
    fungibleDivisibility?: number;
    /**
     * 
     * @type {Array<ResourceManagerSubstateAllOfMetadata>}
     * @memberof ResourceManagerSubstate
     */
    metadata: Array<ResourceManagerSubstateAllOfMetadata>;
    /**
     * A decimal-string-encoded integer between 0 and 2^255-1, which represents the total number of 10^(-18) subunits in
     * the total supply of this resource.
     * @type {string}
     * @memberof ResourceManagerSubstate
     */
    totalSupplyAttos: string;
}

/**
 * Check if a given object implements the ResourceManagerSubstate interface.
 */
export function instanceOfResourceManagerSubstate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "substateType" in value;
    isInstance = isInstance && "resourceType" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "totalSupplyAttos" in value;

    return isInstance;
}

export function ResourceManagerSubstateFromJSON(json: any): ResourceManagerSubstate {
    return ResourceManagerSubstateFromJSONTyped(json, false);
}

export function ResourceManagerSubstateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceManagerSubstate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': EntityTypeFromJSON(json['entity_type']),
        'substateType': SubstateTypeFromJSON(json['substate_type']),
        'resourceType': ResourceTypeFromJSON(json['resource_type']),
        'fungibleDivisibility': !exists(json, 'fungible_divisibility') ? undefined : json['fungible_divisibility'],
        'metadata': ((json['metadata'] as Array<any>).map(ResourceManagerSubstateAllOfMetadataFromJSON)),
        'totalSupplyAttos': json['total_supply_attos'],
    };
}

export function ResourceManagerSubstateToJSON(value?: ResourceManagerSubstate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': EntityTypeToJSON(value.entityType),
        'substate_type': SubstateTypeToJSON(value.substateType),
        'resource_type': ResourceTypeToJSON(value.resourceType),
        'fungible_divisibility': value.fungibleDivisibility,
        'metadata': ((value.metadata as Array<any>).map(ResourceManagerSubstateAllOfMetadataToJSON)),
        'total_supply_attos': value.totalSupplyAttos,
    };
}

