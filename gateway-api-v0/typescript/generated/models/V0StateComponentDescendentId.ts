/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityId } from './EntityId';
import {
    EntityIdFromJSON,
    EntityIdFromJSONTyped,
    EntityIdToJSON,
} from './EntityId';
import type { SubstateId } from './SubstateId';
import {
    SubstateIdFromJSON,
    SubstateIdFromJSONTyped,
    SubstateIdToJSON,
} from './SubstateId';

/**
 * 
 * @export
 * @interface V0StateComponentDescendentId
 */
export interface V0StateComponentDescendentId {
    /**
     * 
     * @type {SubstateId}
     * @memberof V0StateComponentDescendentId
     */
    parent: SubstateId;
    /**
     * 
     * @type {EntityId}
     * @memberof V0StateComponentDescendentId
     */
    entityId: EntityId;
    /**
     * Depth under component
     * @type {number}
     * @memberof V0StateComponentDescendentId
     */
    depth: number;
}

/**
 * Check if a given object implements the V0StateComponentDescendentId interface.
 */
export function instanceOfV0StateComponentDescendentId(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "parent" in value;
    isInstance = isInstance && "entityId" in value;
    isInstance = isInstance && "depth" in value;

    return isInstance;
}

export function V0StateComponentDescendentIdFromJSON(json: any): V0StateComponentDescendentId {
    return V0StateComponentDescendentIdFromJSONTyped(json, false);
}

export function V0StateComponentDescendentIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): V0StateComponentDescendentId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parent': SubstateIdFromJSON(json['parent']),
        'entityId': EntityIdFromJSON(json['entity_id']),
        'depth': json['depth'],
    };
}

export function V0StateComponentDescendentIdToJSON(value?: V0StateComponentDescendentId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parent': SubstateIdToJSON(value.parent),
        'entity_id': EntityIdToJSON(value.entityId),
        'depth': value.depth,
    };
}

