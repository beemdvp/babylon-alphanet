/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
} from './EntityType';

/**
 * 
 * @export
 * @interface EntityId
 */
export interface EntityId {
    /**
     * 
     * @type {EntityType}
     * @memberof EntityId
     */
    entityType: EntityType;
    /**
     * The hex-encoded bytes of the entity address
     * @type {string}
     * @memberof EntityId
     */
    entityAddressHex: string;
}

/**
 * Check if a given object implements the EntityId interface.
 */
export function instanceOfEntityId(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "entityAddressHex" in value;

    return isInstance;
}

export function EntityIdFromJSON(json: any): EntityId {
    return EntityIdFromJSONTyped(json, false);
}

export function EntityIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': EntityTypeFromJSON(json['entity_type']),
        'entityAddressHex': json['entity_address_hex'],
    };
}

export function EntityIdToJSON(value?: EntityId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': EntityTypeToJSON(value.entityType),
        'entity_address_hex': value.entityAddressHex,
    };
}

