/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  V0StateComponentRequest,
  V0StateComponentResponse,
  V0StateEpochResponse,
  V0StateNonFungibleRequest,
  V0StateNonFungibleResponse,
  V0StatePackageRequest,
  V0StatePackageResponse,
  V0StateResourceRequest,
  V0StateResourceResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    V0StateComponentRequestFromJSON,
    V0StateComponentRequestToJSON,
    V0StateComponentResponseFromJSON,
    V0StateComponentResponseToJSON,
    V0StateEpochResponseFromJSON,
    V0StateEpochResponseToJSON,
    V0StateNonFungibleRequestFromJSON,
    V0StateNonFungibleRequestToJSON,
    V0StateNonFungibleResponseFromJSON,
    V0StateNonFungibleResponseToJSON,
    V0StatePackageRequestFromJSON,
    V0StatePackageRequestToJSON,
    V0StatePackageResponseFromJSON,
    V0StatePackageResponseToJSON,
    V0StateResourceRequestFromJSON,
    V0StateResourceRequestToJSON,
    V0StateResourceResponseFromJSON,
    V0StateResourceResponseToJSON,
} from '../models';

export interface StateComponentPostRequest {
    v0StateComponentRequest: V0StateComponentRequest;
}

export interface StateNonFungiblePostRequest {
    v0StateNonFungibleRequest: V0StateNonFungibleRequest;
}

export interface StatePackagePostRequest {
    v0StatePackageRequest: V0StatePackageRequest;
}

export interface StateResourcePostRequest {
    v0StateResourceRequest: V0StateResourceRequest;
}

/**
 * 
 */
export class StateApi extends runtime.BaseAPI {

    /**
     * Read component data
     */
    async stateComponentPostRaw(requestParameters: StateComponentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0StateComponentResponse>> {
        if (requestParameters.v0StateComponentRequest === null || requestParameters.v0StateComponentRequest === undefined) {
            throw new runtime.RequiredError('v0StateComponentRequest','Required parameter requestParameters.v0StateComponentRequest was null or undefined when calling stateComponentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/state/component`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0StateComponentRequestToJSON(requestParameters.v0StateComponentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0StateComponentResponseFromJSON(jsonValue));
    }

    /**
     * Read component data
     */
    async stateComponentPost(requestParameters: StateComponentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0StateComponentResponse> {
        const response = await this.stateComponentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Current Epoch
     */
    async stateEpochPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0StateEpochResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/state/epoch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0StateEpochResponseFromJSON(jsonValue));
    }

    /**
     * Read Current Epoch
     */
    async stateEpochPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0StateEpochResponse> {
        const response = await this.stateEpochPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read non-fungible data
     */
    async stateNonFungiblePostRaw(requestParameters: StateNonFungiblePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0StateNonFungibleResponse>> {
        if (requestParameters.v0StateNonFungibleRequest === null || requestParameters.v0StateNonFungibleRequest === undefined) {
            throw new runtime.RequiredError('v0StateNonFungibleRequest','Required parameter requestParameters.v0StateNonFungibleRequest was null or undefined when calling stateNonFungiblePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/state/non-fungible`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0StateNonFungibleRequestToJSON(requestParameters.v0StateNonFungibleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0StateNonFungibleResponseFromJSON(jsonValue));
    }

    /**
     * Read non-fungible data
     */
    async stateNonFungiblePost(requestParameters: StateNonFungiblePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0StateNonFungibleResponse> {
        const response = await this.stateNonFungiblePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read package data
     */
    async statePackagePostRaw(requestParameters: StatePackagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0StatePackageResponse>> {
        if (requestParameters.v0StatePackageRequest === null || requestParameters.v0StatePackageRequest === undefined) {
            throw new runtime.RequiredError('v0StatePackageRequest','Required parameter requestParameters.v0StatePackageRequest was null or undefined when calling statePackagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/state/package`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0StatePackageRequestToJSON(requestParameters.v0StatePackageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0StatePackageResponseFromJSON(jsonValue));
    }

    /**
     * Read package data
     */
    async statePackagePost(requestParameters: StatePackagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0StatePackageResponse> {
        const response = await this.statePackagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read resource data
     */
    async stateResourcePostRaw(requestParameters: StateResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0StateResourceResponse>> {
        if (requestParameters.v0StateResourceRequest === null || requestParameters.v0StateResourceRequest === undefined) {
            throw new runtime.RequiredError('v0StateResourceRequest','Required parameter requestParameters.v0StateResourceRequest was null or undefined when calling stateResourcePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/state/resource`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0StateResourceRequestToJSON(requestParameters.v0StateResourceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0StateResourceResponseFromJSON(jsonValue));
    }

    /**
     * Read resource data
     */
    async stateResourcePost(requestParameters: StateResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0StateResourceResponse> {
        const response = await this.stateResourcePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
