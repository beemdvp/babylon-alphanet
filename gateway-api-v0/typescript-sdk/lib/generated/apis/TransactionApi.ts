/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  V0CommittedTransactionRequest,
  V0CommittedTransactionResponse,
  V0TransactionStatusRequest,
  V0TransactionStatusResponse,
  V0TransactionSubmitRequest,
  V0TransactionSubmitResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    V0CommittedTransactionRequestFromJSON,
    V0CommittedTransactionRequestToJSON,
    V0CommittedTransactionResponseFromJSON,
    V0CommittedTransactionResponseToJSON,
    V0TransactionStatusRequestFromJSON,
    V0TransactionStatusRequestToJSON,
    V0TransactionStatusResponseFromJSON,
    V0TransactionStatusResponseToJSON,
    V0TransactionSubmitRequestFromJSON,
    V0TransactionSubmitRequestToJSON,
    V0TransactionSubmitResponseFromJSON,
    V0TransactionSubmitResponseToJSON,
} from '../models';

export interface TransactionReceiptPostRequest {
    v0CommittedTransactionRequest: V0CommittedTransactionRequest;
}

export interface TransactionStatusPostRequest {
    v0TransactionStatusRequest: V0TransactionStatusRequest;
}

export interface TransactionSubmitPostRequest {
    v0TransactionSubmitRequest: V0TransactionSubmitRequest;
}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI {

    /**
     * Read Committed Transaction
     */
    async transactionReceiptPostRaw(requestParameters: TransactionReceiptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0CommittedTransactionResponse>> {
        if (requestParameters.v0CommittedTransactionRequest === null || requestParameters.v0CommittedTransactionRequest === undefined) {
            throw new runtime.RequiredError('v0CommittedTransactionRequest','Required parameter requestParameters.v0CommittedTransactionRequest was null or undefined when calling transactionReceiptPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/receipt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0CommittedTransactionRequestToJSON(requestParameters.v0CommittedTransactionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0CommittedTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Read Committed Transaction
     */
    async transactionReceiptPost(requestParameters: TransactionReceiptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0CommittedTransactionResponse> {
        const response = await this.transactionReceiptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Transaction Status
     */
    async transactionStatusPostRaw(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0TransactionStatusResponse>> {
        if (requestParameters.v0TransactionStatusRequest === null || requestParameters.v0TransactionStatusRequest === undefined) {
            throw new runtime.RequiredError('v0TransactionStatusRequest','Required parameter requestParameters.v0TransactionStatusRequest was null or undefined when calling transactionStatusPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0TransactionStatusRequestToJSON(requestParameters.v0TransactionStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0TransactionStatusResponseFromJSON(jsonValue));
    }

    /**
     * Read Transaction Status
     */
    async transactionStatusPost(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0TransactionStatusResponse> {
        const response = await this.transactionStatusPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transaction Submit
     */
    async transactionSubmitPostRaw(requestParameters: TransactionSubmitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0TransactionSubmitResponse>> {
        if (requestParameters.v0TransactionSubmitRequest === null || requestParameters.v0TransactionSubmitRequest === undefined) {
            throw new runtime.RequiredError('v0TransactionSubmitRequest','Required parameter requestParameters.v0TransactionSubmitRequest was null or undefined when calling transactionSubmitPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0TransactionSubmitRequestToJSON(requestParameters.v0TransactionSubmitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0TransactionSubmitResponseFromJSON(jsonValue));
    }

    /**
     * Transaction Submit
     */
    async transactionSubmitPost(requestParameters: TransactionSubmitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0TransactionSubmitResponse> {
        const response = await this.transactionSubmitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
