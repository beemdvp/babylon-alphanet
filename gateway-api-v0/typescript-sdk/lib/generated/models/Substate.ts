/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ComponentInfoSubstate,
    instanceOfComponentInfoSubstate,
    ComponentInfoSubstateFromJSON,
    ComponentInfoSubstateFromJSONTyped,
    ComponentInfoSubstateToJSON,
} from './ComponentInfoSubstate';
import {
    ComponentStateSubstate,
    instanceOfComponentStateSubstate,
    ComponentStateSubstateFromJSON,
    ComponentStateSubstateFromJSONTyped,
    ComponentStateSubstateToJSON,
} from './ComponentStateSubstate';
import {
    KeyValueStoreEntrySubstate,
    instanceOfKeyValueStoreEntrySubstate,
    KeyValueStoreEntrySubstateFromJSON,
    KeyValueStoreEntrySubstateFromJSONTyped,
    KeyValueStoreEntrySubstateToJSON,
} from './KeyValueStoreEntrySubstate';
import {
    NonFungibleSubstate,
    instanceOfNonFungibleSubstate,
    NonFungibleSubstateFromJSON,
    NonFungibleSubstateFromJSONTyped,
    NonFungibleSubstateToJSON,
} from './NonFungibleSubstate';
import {
    PackageSubstate,
    instanceOfPackageSubstate,
    PackageSubstateFromJSON,
    PackageSubstateFromJSONTyped,
    PackageSubstateToJSON,
} from './PackageSubstate';
import {
    ResourceManagerSubstate,
    instanceOfResourceManagerSubstate,
    ResourceManagerSubstateFromJSON,
    ResourceManagerSubstateFromJSONTyped,
    ResourceManagerSubstateToJSON,
} from './ResourceManagerSubstate';
import {
    SystemSubstate,
    instanceOfSystemSubstate,
    SystemSubstateFromJSON,
    SystemSubstateFromJSONTyped,
    SystemSubstateToJSON,
} from './SystemSubstate';
import {
    VaultSubstate,
    instanceOfVaultSubstate,
    VaultSubstateFromJSON,
    VaultSubstateFromJSONTyped,
    VaultSubstateToJSON,
} from './VaultSubstate';

/**
 * @type Substate
 * 
 * @export
 */
export type Substate = { substate_type: 'ComponentInfo' } & ComponentInfoSubstate | { substate_type: 'ComponentState' } & ComponentStateSubstate | { substate_type: 'KeyValueStoreEntry' } & KeyValueStoreEntrySubstate | { substate_type: 'NonFungible' } & NonFungibleSubstate | { substate_type: 'Package' } & PackageSubstate | { substate_type: 'ResourceManager' } & ResourceManagerSubstate | { substate_type: 'System' } & SystemSubstate | { substate_type: 'Vault' } & VaultSubstate;

export function SubstateFromJSON(json: any): Substate {
    return SubstateFromJSONTyped(json, false);
}

export function SubstateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Substate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['substate_type']) {
        case 'ComponentInfo':
            return {...ComponentInfoSubstateFromJSONTyped(json, true), substate_type: 'ComponentInfo'};
        case 'ComponentState':
            return {...ComponentStateSubstateFromJSONTyped(json, true), substate_type: 'ComponentState'};
        case 'KeyValueStoreEntry':
            return {...KeyValueStoreEntrySubstateFromJSONTyped(json, true), substate_type: 'KeyValueStoreEntry'};
        case 'NonFungible':
            return {...NonFungibleSubstateFromJSONTyped(json, true), substate_type: 'NonFungible'};
        case 'Package':
            return {...PackageSubstateFromJSONTyped(json, true), substate_type: 'Package'};
        case 'ResourceManager':
            return {...ResourceManagerSubstateFromJSONTyped(json, true), substate_type: 'ResourceManager'};
        case 'System':
            return {...SystemSubstateFromJSONTyped(json, true), substate_type: 'System'};
        case 'Vault':
            return {...VaultSubstateFromJSONTyped(json, true), substate_type: 'Vault'};
        default:
            throw new Error(`No variant of Substate exists with 'substate_type=${json['substate_type']}'`);
    }
}

export function SubstateToJSON(value?: Substate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['substate_type']) {
        case 'ComponentInfo':
            return ComponentInfoSubstateToJSON(value);
        case 'ComponentState':
            return ComponentStateSubstateToJSON(value);
        case 'KeyValueStoreEntry':
            return KeyValueStoreEntrySubstateToJSON(value);
        case 'NonFungible':
            return NonFungibleSubstateToJSON(value);
        case 'Package':
            return PackageSubstateToJSON(value);
        case 'ResourceManager':
            return ResourceManagerSubstateToJSON(value);
        case 'System':
            return SystemSubstateToJSON(value);
        case 'Vault':
            return VaultSubstateToJSON(value);
        default:
            throw new Error(`No variant of Substate exists with 'substate_type=${value['substate_type']}'`);
    }

}

