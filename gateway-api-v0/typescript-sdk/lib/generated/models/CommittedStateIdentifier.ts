/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommittedStateIdentifier
 */
export interface CommittedStateIdentifier {
    /**
     * An integer between 0 and 10^13, representing the state version. The state version increments with each transaction, starting at 0 pre-genesis.
     * @type {number}
     * @memberof CommittedStateIdentifier
     */
    state_version: number;
}

/**
 * Check if a given object implements the CommittedStateIdentifier interface.
 */
export function instanceOfCommittedStateIdentifier(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state_version" in value;

    return isInstance;
}

export function CommittedStateIdentifierFromJSON(json: any): CommittedStateIdentifier {
    return CommittedStateIdentifierFromJSONTyped(json, false);
}

export function CommittedStateIdentifierFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommittedStateIdentifier {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'state_version': json['state_version'],
    };
}

export function CommittedStateIdentifierToJSON(value?: CommittedStateIdentifier | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'state_version': value.state_version,
    };
}

