/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
} from './EntityType';
import type { ResourceAmount } from './ResourceAmount';
import {
    ResourceAmountFromJSON,
    ResourceAmountFromJSONTyped,
    ResourceAmountToJSON,
} from './ResourceAmount';
import type { SubstateBase } from './SubstateBase';
import {
    SubstateBaseFromJSON,
    SubstateBaseFromJSONTyped,
    SubstateBaseToJSON,
} from './SubstateBase';
import type { SubstateType } from './SubstateType';
import {
    SubstateTypeFromJSON,
    SubstateTypeFromJSONTyped,
    SubstateTypeToJSON,
} from './SubstateType';
import type { VaultSubstateAllOf } from './VaultSubstateAllOf';
import {
    VaultSubstateAllOfFromJSON,
    VaultSubstateAllOfFromJSONTyped,
    VaultSubstateAllOfToJSON,
} from './VaultSubstateAllOf';

/**
 * 
 * @export
 * @interface VaultSubstate
 */
export interface VaultSubstate {
    /**
     * 
     * @type {EntityType}
     * @memberof VaultSubstate
     */
    entity_type: EntityType;
    /**
     * 
     * @type {SubstateType}
     * @memberof VaultSubstate
     */
    substate_type: SubstateType;
    /**
     * 
     * @type {ResourceAmount}
     * @memberof VaultSubstate
     */
    resource_amount: ResourceAmount;
}

/**
 * Check if a given object implements the VaultSubstate interface.
 */
export function instanceOfVaultSubstate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entity_type" in value;
    isInstance = isInstance && "substate_type" in value;
    isInstance = isInstance && "resource_amount" in value;

    return isInstance;
}

export function VaultSubstateFromJSON(json: any): VaultSubstate {
    return VaultSubstateFromJSONTyped(json, false);
}

export function VaultSubstateFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultSubstate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entity_type': EntityTypeFromJSON(json['entity_type']),
        'substate_type': SubstateTypeFromJSON(json['substate_type']),
        'resource_amount': ResourceAmountFromJSON(json['resource_amount']),
    };
}

export function VaultSubstateToJSON(value?: VaultSubstate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': EntityTypeToJSON(value.entity_type),
        'substate_type': SubstateTypeToJSON(value.substate_type),
        'resource_amount': ResourceAmountToJSON(value.resource_amount),
    };
}

