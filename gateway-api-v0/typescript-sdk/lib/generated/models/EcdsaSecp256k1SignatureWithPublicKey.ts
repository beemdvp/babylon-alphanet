/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EcdsaSecp256k1Signature } from './EcdsaSecp256k1Signature';
import {
    EcdsaSecp256k1SignatureFromJSON,
    EcdsaSecp256k1SignatureFromJSONTyped,
    EcdsaSecp256k1SignatureToJSON,
} from './EcdsaSecp256k1Signature';
import type { PublicKeyType } from './PublicKeyType';
import {
    PublicKeyTypeFromJSON,
    PublicKeyTypeFromJSONTyped,
    PublicKeyTypeToJSON,
} from './PublicKeyType';

/**
 * Because ECDSA has recoverable signatures, this only includes a signature
 * @export
 * @interface EcdsaSecp256k1SignatureWithPublicKey
 */
export interface EcdsaSecp256k1SignatureWithPublicKey {
    /**
     * 
     * @type {PublicKeyType}
     * @memberof EcdsaSecp256k1SignatureWithPublicKey
     */
    key_type: PublicKeyType;
    /**
     * 
     * @type {EcdsaSecp256k1Signature}
     * @memberof EcdsaSecp256k1SignatureWithPublicKey
     */
    recoverable_signature: EcdsaSecp256k1Signature;
}

/**
 * Check if a given object implements the EcdsaSecp256k1SignatureWithPublicKey interface.
 */
export function instanceOfEcdsaSecp256k1SignatureWithPublicKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key_type" in value;
    isInstance = isInstance && "recoverable_signature" in value;

    return isInstance;
}

export function EcdsaSecp256k1SignatureWithPublicKeyFromJSON(json: any): EcdsaSecp256k1SignatureWithPublicKey {
    return EcdsaSecp256k1SignatureWithPublicKeyFromJSONTyped(json, false);
}

export function EcdsaSecp256k1SignatureWithPublicKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): EcdsaSecp256k1SignatureWithPublicKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key_type': PublicKeyTypeFromJSON(json['key_type']),
        'recoverable_signature': EcdsaSecp256k1SignatureFromJSON(json['recoverable_signature']),
    };
}

export function EcdsaSecp256k1SignatureWithPublicKeyToJSON(value?: EcdsaSecp256k1SignatureWithPublicKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_type': PublicKeyTypeToJSON(value.key_type),
        'recoverable_signature': EcdsaSecp256k1SignatureToJSON(value.recoverable_signature),
    };
}

