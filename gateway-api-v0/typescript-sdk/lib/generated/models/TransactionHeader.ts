/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PublicKey } from './PublicKey';
import {
    PublicKeyFromJSON,
    PublicKeyFromJSONTyped,
    PublicKeyToJSON,
} from './PublicKey';

/**
 * 
 * @export
 * @interface TransactionHeader
 */
export interface TransactionHeader {
    /**
     * 
     * @type {number}
     * @memberof TransactionHeader
     */
    version: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionHeader
     */
    network_id: number;
    /**
     * An integer between 0 and 10^10, marking the epoch from which the transaction can be submitted
     * @type {number}
     * @memberof TransactionHeader
     */
    start_epoch_inclusive: number;
    /**
     * An integer between 0 and 10^10, marking the epoch from which the transaction will no longer be valid, and be rejected
     * @type {number}
     * @memberof TransactionHeader
     */
    end_epoch_exclusive: number;
    /**
     * A decimal-string-encoded integer between 0 and 2^64 - 1, chosen to be unique to allow replay of transaction intents
     * @type {string}
     * @memberof TransactionHeader
     */
    nonce: string;
    /**
     * 
     * @type {PublicKey}
     * @memberof TransactionHeader
     */
    notary_public_key: PublicKey;
    /**
     * Specifies whether the notary's signature should be included in transaction signers list
     * @type {boolean}
     * @memberof TransactionHeader
     */
    notary_as_signatory: boolean;
    /**
     * An integer between 0 and 2^32 - 1, giving the maximum number of cost units available for transaction execution.
     * @type {number}
     * @memberof TransactionHeader
     */
    cost_unit_limit: number;
    /**
     * An integer between 0 and 2^32 - 1, giving the validator tip as a percentage amount. A value of "1" corresponds to 1% of the fee.
     * @type {number}
     * @memberof TransactionHeader
     */
    tip_percentage: number;
}

/**
 * Check if a given object implements the TransactionHeader interface.
 */
export function instanceOfTransactionHeader(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "network_id" in value;
    isInstance = isInstance && "start_epoch_inclusive" in value;
    isInstance = isInstance && "end_epoch_exclusive" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "notary_public_key" in value;
    isInstance = isInstance && "notary_as_signatory" in value;
    isInstance = isInstance && "cost_unit_limit" in value;
    isInstance = isInstance && "tip_percentage" in value;

    return isInstance;
}

export function TransactionHeaderFromJSON(json: any): TransactionHeader {
    return TransactionHeaderFromJSONTyped(json, false);
}

export function TransactionHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionHeader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'network_id': json['network_id'],
        'start_epoch_inclusive': json['start_epoch_inclusive'],
        'end_epoch_exclusive': json['end_epoch_exclusive'],
        'nonce': json['nonce'],
        'notary_public_key': PublicKeyFromJSON(json['notary_public_key']),
        'notary_as_signatory': json['notary_as_signatory'],
        'cost_unit_limit': json['cost_unit_limit'],
        'tip_percentage': json['tip_percentage'],
    };
}

export function TransactionHeaderToJSON(value?: TransactionHeader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'network_id': value.network_id,
        'start_epoch_inclusive': value.start_epoch_inclusive,
        'end_epoch_exclusive': value.end_epoch_exclusive,
        'nonce': value.nonce,
        'notary_public_key': PublicKeyToJSON(value.notary_public_key),
        'notary_as_signatory': value.notary_as_signatory,
        'cost_unit_limit': value.cost_unit_limit,
        'tip_percentage': value.tip_percentage,
    };
}

