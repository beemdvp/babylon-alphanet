/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeeSummary } from './FeeSummary';
import {
    FeeSummaryFromJSON,
    FeeSummaryFromJSONTyped,
    FeeSummaryToJSON,
} from './FeeSummary';
import type { SborData } from './SborData';
import {
    SborDataFromJSON,
    SborDataFromJSONTyped,
    SborDataToJSON,
} from './SborData';
import type { StateUpdates } from './StateUpdates';
import {
    StateUpdatesFromJSON,
    StateUpdatesFromJSONTyped,
    StateUpdatesToJSON,
} from './StateUpdates';
import type { TransactionStatus } from './TransactionStatus';
import {
    TransactionStatusFromJSON,
    TransactionStatusFromJSONTyped,
    TransactionStatusToJSON,
} from './TransactionStatus';

/**
 * The transaction execution receipt
 * @export
 * @interface TransactionReceipt
 */
export interface TransactionReceipt {
    /**
     * 
     * @type {TransactionStatus}
     * @memberof TransactionReceipt
     */
    status: TransactionStatus;
    /**
     * 
     * @type {FeeSummary}
     * @memberof TransactionReceipt
     */
    fee_summary: FeeSummary;
    /**
     * 
     * @type {StateUpdates}
     * @memberof TransactionReceipt
     */
    state_updates: StateUpdates;
    /**
     * The manifest line-by-line engine return data (only present if status is Succeeded)
     * @type {Array<SborData>}
     * @memberof TransactionReceipt
     */
    output?: Array<SborData>;
    /**
     * Error message (only present if status is Failed or Rejected)
     * @type {string}
     * @memberof TransactionReceipt
     */
    error_message?: string;
}

/**
 * Check if a given object implements the TransactionReceipt interface.
 */
export function instanceOfTransactionReceipt(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "fee_summary" in value;
    isInstance = isInstance && "state_updates" in value;

    return isInstance;
}

export function TransactionReceiptFromJSON(json: any): TransactionReceipt {
    return TransactionReceiptFromJSONTyped(json, false);
}

export function TransactionReceiptFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionReceipt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': TransactionStatusFromJSON(json['status']),
        'fee_summary': FeeSummaryFromJSON(json['fee_summary']),
        'state_updates': StateUpdatesFromJSON(json['state_updates']),
        'output': !exists(json, 'output') ? undefined : ((json['output'] as Array<any>).map(SborDataFromJSON)),
        'error_message': !exists(json, 'error_message') ? undefined : json['error_message'],
    };
}

export function TransactionReceiptToJSON(value?: TransactionReceipt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': TransactionStatusToJSON(value.status),
        'fee_summary': FeeSummaryToJSON(value.fee_summary),
        'state_updates': StateUpdatesToJSON(value.state_updates),
        'output': value.output === undefined ? undefined : ((value.output as Array<any>).map(SborDataToJSON)),
        'error_message': value.error_message,
    };
}

