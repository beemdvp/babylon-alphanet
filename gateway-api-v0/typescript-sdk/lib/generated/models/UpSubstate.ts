/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Substate } from './Substate';
import {
    SubstateFromJSON,
    SubstateFromJSONTyped,
    SubstateToJSON,
} from './Substate';
import type { SubstateId } from './SubstateId';
import {
    SubstateIdFromJSON,
    SubstateIdFromJSONTyped,
    SubstateIdToJSON,
} from './SubstateId';

/**
 * 
 * @export
 * @interface UpSubstate
 */
export interface UpSubstate {
    /**
     * 
     * @type {SubstateId}
     * @memberof UpSubstate
     */
    substate_id: SubstateId;
    /**
     * An integer between 0 and 10^13, counting the number of times the substate was updated
     * @type {number}
     * @memberof UpSubstate
     */
    version: number;
    /**
     * The hex-encoded, SBOR-encoded substate data bytes
     * @type {string}
     * @memberof UpSubstate
     */
    substate_hex: string;
    /**
     * The hex-encoded single-SHA256 hash of the substate data bytes
     * @type {string}
     * @memberof UpSubstate
     */
    substate_data_hash: string;
    /**
     * 
     * @type {Substate}
     * @memberof UpSubstate
     */
    substate_data: Substate;
}

/**
 * Check if a given object implements the UpSubstate interface.
 */
export function instanceOfUpSubstate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "substate_id" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "substate_hex" in value;
    isInstance = isInstance && "substate_data_hash" in value;
    isInstance = isInstance && "substate_data" in value;

    return isInstance;
}

export function UpSubstateFromJSON(json: any): UpSubstate {
    return UpSubstateFromJSONTyped(json, false);
}

export function UpSubstateFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpSubstate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'substate_id': SubstateIdFromJSON(json['substate_id']),
        'version': json['version'],
        'substate_hex': json['substate_hex'],
        'substate_data_hash': json['substate_data_hash'],
        'substate_data': SubstateFromJSON(json['substate_data']),
    };
}

export function UpSubstateToJSON(value?: UpSubstate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'substate_id': SubstateIdToJSON(value.substate_id),
        'version': value.version,
        'substate_hex': value.substate_hex,
        'substate_data_hash': value.substate_data_hash,
        'substate_data': SubstateToJSON(value.substate_data),
    };
}

