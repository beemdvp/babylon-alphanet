/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Alphanet v0 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PublicKeyType } from './PublicKeyType';
import {
    PublicKeyTypeFromJSON,
    PublicKeyTypeFromJSONTyped,
    PublicKeyTypeToJSON,
} from './PublicKeyType';

/**
 * 
 * @export
 * @interface EddsaEd25519Signature
 */
export interface EddsaEd25519Signature {
    /**
     * 
     * @type {PublicKeyType}
     * @memberof EddsaEd25519Signature
     */
    key_type: PublicKeyType;
    /**
     * A hex-encoded EdDSA Ed25519 signature (64 bytes). This is CONCAT(R, s) where R and s are each 32-bytes in padded big-endian format.
     * @type {string}
     * @memberof EddsaEd25519Signature
     */
    signature_hex: string;
}

/**
 * Check if a given object implements the EddsaEd25519Signature interface.
 */
export function instanceOfEddsaEd25519Signature(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key_type" in value;
    isInstance = isInstance && "signature_hex" in value;

    return isInstance;
}

export function EddsaEd25519SignatureFromJSON(json: any): EddsaEd25519Signature {
    return EddsaEd25519SignatureFromJSONTyped(json, false);
}

export function EddsaEd25519SignatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): EddsaEd25519Signature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key_type': PublicKeyTypeFromJSON(json['key_type']),
        'signature_hex': json['signature_hex'],
    };
}

export function EddsaEd25519SignatureToJSON(value?: EddsaEd25519Signature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_type': PublicKeyTypeToJSON(value.key_type),
        'signature_hex': value.signature_hex,
    };
}

